name: CI

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  checks: write
  pages: write

jobs:
  run-test:
    name: 'Run Selenium + Mocha tests'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Git clone
        uses: actions/checkout@v3

      - name: Check for duplicated file names
        run: |
          git ls-files --exclude-standard --others --cached --no-empty-directory | sort -f > files.txt
          uniq -di files.txt > duplicates.txt
          if [[ -s duplicates.txt ]]; then
            echo "Found files with the same name:"
            cat duplicates.txt
            exit 1
          fi

      - name: Install JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Npm install
        run: npm ci

      - name: Prepare Jenkins data
        run: |
          cat ${{ github.workspace }}/jenkins_data/jenkins_backup0* > ${{ github.workspace }}/jenkins_backup.tar
          md5sum ${{ github.workspace }}/jenkins_backup.tar

      - name: Extract Jenkins data and set permission
        run: |
          tar -xvf ./jenkins_backup.tar
          HOME_DIR=$(find . -type d -name "jenkins_home" | head -n 1)
          HOME_DIR=$(realpath "$HOME_DIR")
          echo "Found Jenkins home at: $HOME_DIR"
          chmod -R 777 "$HOME_DIR"
          echo "JENKINS_HOME=$HOME_DIR" >> $GITHUB_ENV

      # - name: Docker login
      #   run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Docker start Jenkins container
        run: |
          echo "JENKINS_HOME is ${{ env.JENKINS_HOME }}"
          docker run --rm --detach \
            -p 8080:8080 -p 50000:50000 \
            -v "${{ env.JENKINS_HOME }}:/var/jenkins_home" \
            jenkins/jenkins:2.462.3-lts-jdk17

      - name: Wait for Jenkins to be ready
        run: chmod +x ./.github/wait-for-jenkins.sh && ./.github/wait-for-jenkins.sh

      - name: Run Mocha + Selenium tests (JUnit + Allure results)
        run: npm run test:ci || true

      - name: Create test summary
        uses: test-summary/action@v1.0
        if: always()
        with:
          paths: reports/junit/test-results-*.xml

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: "reports/junit/test-results-*.xml"

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@v1.11
        if: always()
        with:
          allure_results: allure-results
          allure_report: allure-report

      - name: Upload Allure report artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: allure-report

      # Публикуем Allure на gh-pages только при PR и ручном запуске
      - name: Deploy latest Allure report to GitHub Pages
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report
          force_orphan: true

      - name: Upload screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: selenium-screenshots
          path: ./screenshots
          if-no-files-found: ignore
